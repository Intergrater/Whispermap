document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const recordButton = document.getElementById('record-button');
    const recordStatus = document.getElementById('record-status');
    const recordingTimer = document.getElementById('recording-timer');
    const locationStatus = document.getElementById('location-status');
    const locationDot = document.querySelector('.dot');
    const whispersList = document.getElementById('whispers-list');
    const whispersStatus = document.getElementById('whispers-status');
    const premiumBtn = document.getElementById('premium-btn');
    const premiumFeaturesBtn = document.getElementById('premium-features-btn');
    const premiumModal = document.getElementById('premium-modal');
    const closeModal = document.querySelector('.close-modal');
    const whisperTypeSelect = document.getElementById('whisper-type');
    const whisperRadius = document.getElementById('whisper-radius');
    const radiusValue = document.getElementById('radius-value');
    const adBanner = document.getElementById('ad-banner');
    const adCloseBtn = document.querySelector('.ad-close-btn');
    const filterButtons = document.querySelectorAll('.filter-btn');
    
    // App state
    let mediaRecorder;
    let audioChunks = [];
    let recordingStartTime;
    let timerInterval;
    let currentPosition = null;
    let isRecording = false;
    let currentlyPlayingAudio = null;
    let soundEffects = {};
    let isPremiumUser = false;
    let currentFilter = 'all';
    let allWhispers = [];
    
    // Constants
    const MAX_RECORDING_TIME = 30000; // 30 seconds
    const SERVER_URL = 'http://localhost:9000';
    
    // Initialize the app
    initApp();
    
    // Initialize loading sequence
    setTimeout(() => {
        document.body.classList.add('loaded');
    }, 1500);
    
    function initApp() {
        // Load sound effects
        loadSoundEffects();
        
        // Add welcome animation
        animateWelcome();
        
        // Request location permission and start tracking
        initGeolocation();
        
        // Set up record button events
        setupRecordButton();
        
        // Set up premium features
        setupPremiumFeatures();
        
        // Set up filter buttons
        setupFilterButtons();
        
        // Set up ad banner
        setupAdBanner();
        
        // Check for nearby whispers periodically
        setInterval(fetchNearbyWhispers, 60000); // Check every minute
    }
    
    function loadSoundEffects() {
        // Create audio objects for sound effects
        soundEffects.startRecord = new Audio('public/sounds/record-start.mp3');
        soundEffects.stopRecord = new Audio('public/sounds/record-stop.mp3');
        soundEffects.uploadSuccess = new Audio('public/sounds/success.mp3');
        soundEffects.uploadError = new Audio('public/sounds/error.mp3');
        soundEffects.locationFound = new Audio('public/sounds/location.mp3');
        soundEffects.premium = new Audio('public/sounds/premium.mp3');
        
        // Preload sounds
        for (let sound in soundEffects) {
            soundEffects[sound].load();
        }
    }
    
    function animateWelcome() {
        const header = document.querySelector('header');
        header.style.opacity = '0';
        header.style.transform = 'translateY(-20px)';
        
        setTimeout(() => {
            header.style.transition = 'all 0.8s ease-out';
            header.style.opacity = '1';
            header.style.transform = 'translateY(0)';
        }, 300);
    }
    
    function setupPremiumFeatures() {
        // Check if user is premium (would normally check with server)
        isPremiumUser = localStorage.getItem('isPremiumUser') === 'true';
        updatePremiumUI();
        
        // Set up premium button click
        premiumBtn.addEventListener('click', openPremiumModal);
        premiumFeaturesBtn.addEventListener('click', openPremiumModal);
        
        // Set up modal close
        closeModal.addEventListener('click', closePremiumModal);
        window.addEventListener('click', (event) => {
            if (event.target === premiumModal) {
                closePremiumModal();
            }
        });
        
        // Set up pricing buttons
        const pricingButtons = document.querySelectorAll('.pricing-btn');
        pricingButtons.forEach(btn => {
            btn.addEventListener('click', purchasePremium);
        });
        
        // Set up whisper type select
        whisperTypeSelect.addEventListener('change', handleWhisperTypeChange);
        
        // Set up whisper radius
        whisperRadius.addEventListener('input', updateRadiusValue);
    }
    
    function setupFilterButtons() {
        filterButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                // Remove active class from all buttons
                filterButtons.forEach(b => b.classList.remove('active'));
                
                // Add active class to clicked button
                btn.classList.add('active');
                
                // Update filter
                currentFilter = btn.id.replace('filter-', '');
                
                // Apply filter
                filterWhispers();
            });
        });
    }
    
    function setupAdBanner() {
        // Hide ad banner for premium users
        if (isPremiumUser) {
            adBanner.style.display = 'none';
        }
        
        // Set up ad close button
        adCloseBtn.addEventListener('click', () => {
            adBanner.style.display = 'none';
            
            // Show ad again after 2 minutes for non-premium users
            if (!isPremiumUser) {
                setTimeout(() => {
                    adBanner.style.display = 'block';
                }, 120000);
            }
        });
    }
    
    function openPremiumModal() {
        premiumModal.classList.add('show');
        
        try {
            soundEffects.premium.play();
        } catch (e) {
            console.log('Could not play sound effect');
        }
    }
    
    function closePremiumModal() {
        premiumModal.classList.remove('show');
    }
    
    function purchasePremium() {
        // This would normally integrate with a payment processor
        // For demo purposes, we'll just set the user as premium
        isPremiumUser = true;
        localStorage.setItem('isPremiumUser', 'true');
        
        // Update UI
        updatePremiumUI();
        
        // Close modal
        closePremiumModal();
        
        // Show success notification
        showNotification('You are now a premium user! Enjoy all the benefits!', 'success');
    }
    
    function updatePremiumUI() {
        if (isPremiumUser) {
            premiumBtn.textContent = 'âœ“ Premium Active';
            premiumBtn.style.background = 'linear-gradient(135deg, #00b894 0%, #00cec9 100%)';
            adBanner.style.display = 'none';
            
            // Enable premium options in whisper type select
            Array.from(whisperTypeSelect.options).forEach(option => {
                option.disabled = false;
            });
            
            // Allow full range for whisper radius
            whisperRadius.max = 500;
        } else {
            premiumBtn.innerHTML = '<i class="fas fa-crown"></i> Go Premium';
            premiumBtn.style.background = 'linear-gradient(135deg, #f6d365 0%, #fda085 100%)';
            adBanner.style.display = 'block';
            
            // Disable premium options in whisper type select
            Array.from(whisperTypeSelect.options).forEach(option => {
                if (option.value !== 'public') {
                    option.disabled = true;
                }
            });
            
            // Limit range for non-premium users
            whisperRadius.max = 200;
            if (parseInt(whisperRadius.value) > 200) {
                whisperRadius.value = 200;
                updateRadiusValue();
            }
        }
    }
    
    function handleWhisperTypeChange() {
        if (!isPremiumUser && whisperTypeSelect.value !== 'public') {
            showNotification('This feature is only available for premium users', 'error');
            whisperTypeSelect.value = 'public';
        }
    }
    
    function updateRadiusValue() {
        radiusValue.textContent = `${whisperRadius.value}m`;
    }
    
    function filterWhispers() {
        if (!allWhispers.length) return;
        
        let filteredWhispers = [...allWhispers];
        
        switch (currentFilter) {
            case 'new':
                // Sort by newest first (already sorted this way)
                break;
            case 'popular':
                // In a real app, this would sort by popularity metrics
                // For demo, we'll just randomize to simulate different order
                filteredWhispers.sort(() => Math.random() - 0.5);
                break;
            case 'all':
            default:
                // Keep default sorting (newest first)
                break;
        }
        
        // Display filtered whispers
        displayWhispers(filteredWhispers, true);
    }
    
    function initGeolocation() {
        if ('geolocation' in navigator) {
            locationStatus.textContent = 'Getting your location...';
            
            // Get current position
            navigator.geolocation.getCurrentPosition(
                position => {
                    handlePositionSuccess(position);
                    
                    // Watch position for changes
                    navigator.geolocation.watchPosition(
                        handlePositionSuccess,
                        handlePositionError,
                        { enableHighAccuracy: true }
                    );
                },
                handlePositionError,
                { enableHighAccuracy: true }
            );
        } else {
            locationStatus.textContent = 'Geolocation not supported';
            locationDot.style.backgroundColor = 'var(--error-color)';
            showNotification('Geolocation is required for this app', 'error');
        }
    }
    
    function handlePositionSuccess(position) {
        const isFirstLocation = !currentPosition;
        
        currentPosition = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
        };
        
        locationStatus.textContent = 'Location found';
        locationDot.style.backgroundColor = 'var(--success-color)';
        
        if (isFirstLocation) {
            try {
                soundEffects.locationFound.play();
            } catch (e) {
                console.log('Could not play sound effect');
            }
            showNotification('Location found! You can now record and discover whispers', 'success');
        }
        
        // Fetch nearby whispers when location is obtained
        fetchNearbyWhispers();
    }
    
    function handlePositionError(error) {
        console.error('Geolocation error:', error);
        locationStatus.textContent = 'Location error: ' + error.message;
        locationDot.style.backgroundColor = 'var(--error-color)';
        showNotification('Location access is required for WhisperMap to work', 'error');
    }
    
    function setupRecordButton() {
        // Request microphone permission
        navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                // Create media recorder
                mediaRecorder = new MediaRecorder(stream);
                
                mediaRecorder.ondataavailable = event => {
                    audioChunks.push(event.data);
                };
                
                mediaRecorder.onstop = () => {
                    const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
                    uploadWhisper(audioBlob);
                };
                
                // Enable record button
                recordButton.disabled = false;
                showNotification('Microphone access granted', 'success');
            })
            .catch(error => {
                console.error('Microphone access error:', error);
                recordStatus.textContent = 'Microphone access denied';
                recordButton.disabled = true;
                showNotification('Microphone access is required to record whispers', 'error');
            });
        
        // Set up touch/mouse events for record button
        recordButton.addEventListener('mousedown', startRecording);
        recordButton.addEventListener('touchstart', startRecording);
        
        recordButton.addEventListener('mouseup', stopRecording);
        recordButton.addEventListener('touchend', stopRecording);
        recordButton.addEventListener('mouseleave', stopRecording);
        
        // Add hover effect
        recordButton.addEventListener('mouseover', () => {
            recordButton.style.transform = 'scale(1.05)';
        });
        
        recordButton.addEventListener('mouseout', () => {
            recordButton.style.transform = 'scale(1)';
        });
    }
    
    function startRecording(event) {
        event.preventDefault();
        
        if (!currentPosition) {
            recordStatus.textContent = 'Location not available. Cannot record.';
            showNotification('Location not available. Cannot record.', 'error');
            return;
        }
        
        // Check if premium features are being used by non-premium user
        if (!isPremiumUser && whisperTypeSelect.value !== 'public') {
            showNotification('This feature is only available for premium users', 'error');
            whisperTypeSelect.value = 'public';
            return;
        }
        
        if (isRecording) return;
        
        isRecording = true;
        audioChunks = [];
        
        // Play sound effect
        try {
            soundEffects.startRecord.play();
        } catch (e) {
            console.log('Could not play sound effect');
        }
        
        // Start recording
        mediaRecorder.start();
        
        // Update UI
        recordButton.classList.add('recording');
        recordStatus.textContent = 'Recording...';
        recordingTimer.style.visibility = 'visible';
        
        // Add recording animation
        document.body.classList.add('is-recording');
        
        // Start timer
        recordingStartTime = Date.now();
        updateTimer();
        timerInterval = setInterval(updateTimer, 1000);
        
        // Set timeout to stop recording after MAX_RECORDING_TIME
        setTimeout(() => {
            if (isRecording) {
                stopRecording();
                showNotification('Maximum recording time reached', 'info');
            }
        }, MAX_RECORDING_TIME);
    }
    
    function stopRecording() {
        if (!isRecording) return;
        
        isRecording = false;
        
        // Play sound effect
        try {
            soundEffects.stopRecord.play();
        } catch (e) {
            console.log('Could not play sound effect');
        }
        
        // Stop recording
        mediaRecorder.stop();
        
        // Update UI
        recordButton.classList.remove('recording');
        recordStatus.textContent = 'Processing...';
        document.body.classList.remove('is-recording');
        
        // Stop timer
        clearInterval(timerInterval);
        recordingTimer.style.visibility = 'hidden';
    }
    
    function updateTimer() {
        const elapsedTime = Date.now() - recordingStartTime;
        const seconds = Math.floor(elapsedTime / 1000);
        const minutes = Math.floor(seconds / 60);
        const remainingSeconds = seconds % 60;
        
        recordingTimer.textContent = `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
        
        // Visual feedback as time progresses
        const progress = elapsedTime / MAX_RECORDING_TIME;
        const hue = 120 - (progress * 120); // From green (120) to red (0)
        recordingTimer.style.color = `hsl(${hue}, 70%, 50%)`;
        
        // Stop recording if max time reached
        if (elapsedTime >= MAX_RECORDING_TIME) {
            stopRecording();
        }
    }
    
    function uploadWhisper(audioBlob) {
        if (!currentPosition) {
            recordStatus.textContent = 'Location not available. Cannot upload.';
            showNotification('Location not available. Cannot upload.', 'error');
            return;
        }
        
        const formData = new FormData();
        formData.append('audio', audioBlob, 'recording.webm');
        formData.append('latitude', currentPosition.latitude);
        formData.append('longitude', currentPosition.longitude);
        formData.append('type', whisperTypeSelect.value);
        formData.append('radius', whisperRadius.value);
        
        // Add expiration time based on whisper type
        let expirationHours = 24; // Default for public whispers
        if (whisperTypeSelect.value === 'lasting' && isPremiumUser) {
            expirationHours = 24 * 7; // 7 days for lasting whispers
        }
        formData.append('expirationHours', expirationHours);
        
        // Show loading animation
        recordStatus.textContent = 'Uploading whisper...';
        recordStatus.classList.add('uploading');
        
        fetch(`${SERVER_URL}/api/whispers`, {
            method: 'POST',
            body: formData
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            recordStatus.classList.remove('uploading');
            recordStatus.textContent = 'Whisper uploaded successfully!';
            
            // Play success sound
            try {
                soundEffects.uploadSuccess.play();
            } catch (e) {
                console.log('Could not play sound effect');
            }
            
            showNotification('Your whisper has been shared!', 'success');
            
            // Refresh the whispers list with animation
            fetchNearbyWhispers(true);
            
            // Clear status after a few seconds
            setTimeout(() => {
                recordStatus.textContent = '';
            }, 3000);
        })
        .catch(error => {
            console.error('Upload error:', error);
            recordStatus.classList.remove('uploading');
            recordStatus.textContent = 'Failed to upload whisper';
            
            // Play error sound
            try {
                soundEffects.uploadError.play();
            } catch (e) {
                console.log('Could not play sound effect');
            }
            
            showNotification('Failed to upload whisper. Please try again.', 'error');
        });
    }
    
    function fetchNearbyWhispers(animate = false) {
        if (!currentPosition) {
            whispersStatus.textContent = 'Location not available. Cannot fetch whispers.';
            return;
        }
        
        whispersStatus.textContent = 'Searching for whispers...';
        
        if (animate) {
            // Add loading animation
            whispersStatus.classList.add('searching');
        }
        
        // Get the current radius from the slider
        const radius = whisperRadius.value;
        
        fetch(`${SERVER_URL}/api/whispers?latitude=${currentPosition.latitude}&longitude=${currentPosition.longitude}&radius=${radius}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(whispers => {
                whispersStatus.classList.remove('searching');
                
                // Store all whispers for filtering
                allWhispers = whispers;
                
                // Apply current filter
                filterWhispers();
            })
            .catch(error => {
                console.error('Fetch error:', error);
                whispersStatus.classList.remove('searching');
                whispersStatus.textContent = 'Failed to fetch whispers';
                showNotification('Could not load nearby whispers', 'error');
            });
    }
    
    function displayWhispers(whispers, animate = false) {
        // Clear the list with fade-out if animating
        if (animate) {
            whispersList.style.opacity = '0';
            setTimeout(() => {
                whispersList.innerHTML = '';
                renderWhispers(whispers);
                whispersList.style.opacity = '1';
            }, 300);
        } else {
            whispersList.innerHTML = '';
            renderWhispers(whispers);
        }
    }
    
    function renderWhispers(whispers) {
        if (whispers.length === 0) {
            whispersStatus.textContent = 'No whispers found nearby';
            return;
        }
        
        whispersStatus.textContent = `${whispers.length} whisper(s) found nearby`;
        
        // Sort whispers by timestamp (newest first)
        whispers.sort((a, b) => b.timestamp - a.timestamp);
        
        whispers.forEach((whisper, index) => {
            const listItem = document.createElement('li');
            listItem.className = 'whisper-item';
            
            // Add class for premium whispers
            if (whisper.type === 'private' || whisper.type === 'lasting') {
                listItem.classList.add('premium-whisper');
            }
            
            // Add staggered animation delay
            listItem.style.animationDelay = `${index * 0.1}s`;
            
            const playButton = document.createElement('button');
            playButton.className = 'play-btn';
            playButton.innerHTML = 'â–¶';
            playButton.setAttribute('data-audio', whisper.audioFile);
            playButton.addEventListener('click', playWhisper);
            
            const infoDiv = document.createElement('div');
            infoDiv.className = 'whisper-info';
            
            const timeAgo = getTimeAgo(whisper.timestamp);
            const expiryTime = getExpiryTime(whisper.timestamp, whisper.expirationHours || 24);
            
            // Create whisper type badge
            let typeBadge = '';
            if (whisper.type === 'private') {
                typeBadge = '<span class="whisper-badge private">Private</span>';
            } else if (whisper.type === 'lasting') {
                typeBadge = '<span class="whisper-badge lasting">7 Days</span>';
            }
            
            infoDiv.innerHTML = `
                <div class="whisper-meta">
                    <div class="whisper-time">${timeAgo}</div>
                    ${typeBadge}
                </div>
                <div>Anonymous whisper</div>
                <div class="whisper-expiry">Expires: ${expiryTime}</div>
                <div class="whisper-range">Range: ${whisper.radius || 100}m</div>
            `;
            
            listItem.appendChild(playButton);
            listItem.appendChild(infoDiv);
            whispersList.appendChild(listItem);
        });
    }
    
    function playWhisper(event) {
        const audioFile = event.currentTarget.getAttribute('data-audio');
        const audioUrl = `${SERVER_URL}/api/audio/${audioFile}`;
        
        // Stop any currently playing audio
        if (currentlyPlayingAudio) {
            currentlyPlayingAudio.pause();
            currentlyPlayingAudio = null;
            
            // Reset all play buttons
            document.querySelectorAll('.play-btn').forEach(btn => {
                btn.innerHTML = 'â–¶';
                btn.classList.remove('playing');
            });
        }
        
        // If we clicked the same button that was playing, just stop
        if (event.currentTarget.innerHTML === 'â– ') {
            event.currentTarget.innerHTML = 'â–¶';
            event.currentTarget.classList.remove('playing');
            return;
        }
        
        // Play the new audio
        const audio = new Audio(audioUrl);
        
        // Add visualizer effect to the button
        event.currentTarget.classList.add('playing');
        
        audio.addEventListener('ended', () => {
            event.currentTarget.innerHTML = 'â–¶';
            event.currentTarget.classList.remove('playing');
            currentlyPlayingAudio = null;
        });
        
        audio.play()
            .then(() => {
                event.currentTarget.innerHTML = 'â– ';
                currentlyPlayingAudio = audio;
            })
            .catch(error => {
                console.error('Audio playback error:', error);
                event.currentTarget.innerHTML = 'â–¶';
                event.currentTarget.classList.remove('playing');
                showNotification('Could not play this whisper', 'error');
            });
    }
    
    function getTimeAgo(timestamp) {
        const now = Date.now();
        const diffMs = now - timestamp;
        const diffMinutes = Math.floor(diffMs / (60 * 1000));
        
        if (diffMinutes < 1) {
            return 'Just now';
        } else if (diffMinutes < 60) {
            return `${diffMinutes} minute(s) ago`;
        } else {
            const diffHours = Math.floor(diffMinutes / 60);
            if (diffHours < 24) {
                return `${diffHours} hour(s) ago`;
            } else {
                const diffDays = Math.floor(diffHours / 24);
                return `${diffDays} day(s) ago`;
            }
        }
    }
    
    function getExpiryTime(timestamp, expirationHours = 24) {
        const expiryTime = new Date(timestamp + expirationHours * 60 * 60 * 1000);
        
        // If more than 24 hours, show date and time
        if (expirationHours > 24) {
            return expiryTime.toLocaleDateString() + ' ' + 
                   expiryTime.getHours().toString().padStart(2, '0') + ':' + 
                   expiryTime.getMinutes().toString().padStart(2, '0');
        }
        
        // Otherwise just show time
        return expiryTime.getHours().toString().padStart(2, '0') + ':' + 
               expiryTime.getMinutes().toString().padStart(2, '0');
    }
    
    function showNotification(message, type = 'info') {
        // Create notification element if it doesn't exist
        let notification = document.querySelector('.notification');
        if (!notification) {
            notification = document.createElement('div');
            notification.className = 'notification';
            document.body.appendChild(notification);
        }
        
        // Set notification content and type
        notification.textContent = message;
        notification.className = `notification ${type}`;
        
        // Show notification
        notification.style.display = 'block';
        notification.style.opacity = '0';
        notification.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            notification.style.transition = 'all 0.3s ease';
            notification.style.opacity = '1';
            notification.style.transform = 'translateY(0)';
        }, 10);
        
        // Hide notification after 3 seconds
        setTimeout(() => {
            notification.style.opacity = '0';
            notification.style.transform = 'translateY(-20px)';
            
            setTimeout(() => {
                notification.style.display = 'none';
            }, 300);
        }, 3000);
    }
}); 
}); 